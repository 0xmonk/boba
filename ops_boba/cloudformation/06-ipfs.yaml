
AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Graph Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DockerPrefix:
    Type: String
    Default: omgx

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: rinkeby-infrastructure-core

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/bath-submitter.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

  LoadBalancerIPFS:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PrivateSubnet2
      Type: application
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: '3600'
      SecurityGroups:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:LoadBalancerIntSecurityGroup

  IPFSLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5001
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /webui
      HealthCheckProtocol: HTTP # TODO Implement proper healthcheck
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 10
      Matcher:
        HttpCode: "200-499"

  IPFSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancerIPFS
      Port: 5001
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref IPFSLBTargetGroup

  IPFSListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref IPFSLBTargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
            - !GetAtt LoadBalancerIPFS.DNSName
      ListenerArn: !Ref IPFSListener
      Priority: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: ipfs
          Host:
            SourcePath: "/mnt/efs/ipfs"
      ContainerDefinitions:
        - Image: ipfs/go-ipfs:v0.4.23
          Name: ipfs
          PortMappings:
            - ContainerPort: 5001
              HostPort: 0
          MountPoints:
            - ContainerPath: "/data/ipfs"
              SourceVolume: ipfs
          DockerLabels:
            com.datadoghq.ad.check_names: '["ipfs"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "ipfs", "service": "ipfs"}]'
          Essential: true
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: bridge
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "ipfs-${EnvironmentName}"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - "IPFSListenerRule"
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterReplica"
      LoadBalancers:
        - ContainerName: ipfs
          ContainerPort: 5001
          TargetGroupArn: !Ref IPFSLBTargetGroup
      HealthCheckGracePeriodSeconds: 30
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "ipfs"
      TaskDefinition: !Ref TaskDefinition

Outputs:
  LoadBalancerIPFSDNSName:
    Value: !GetAtt LoadBalancerIPFS.DNSName
    Export:
      Name: !Sub "${InfrastructureStackName}:LoadBalancerIPFS:DNSName"
