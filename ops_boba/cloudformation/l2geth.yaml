AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya L2Geth Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  GoEthereumImage:
    Type: String
    Default: l2geth

  DockerPrefix:
    Type: String
    Default: bobanetwork

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "s3:*"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/l2geth.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
  DNSRecordV4:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName:
          Fn::Sub:
            - "dualstack.${DomainName}."
            - DomainName:
                Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:DNSName"
        HostedZoneId:
          Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:CanonicalHostedZoneID"
      HostedZoneName:
        Fn::Sub:
          - "${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
      Name:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"

  GoEthereumLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8545
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GoEthereumLBTargetGroupWS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8546
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GoEthereumListenerWS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:ARN"
      Port: 8546
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GoEthereumLBTargetGroupWS

  GoEthereumListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:ARN"
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/22629c84-0c7b-449a-9a5c-f2ccbc4afa99
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GoEthereumLBTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: l2-node
          Host:
            SourcePath: "/mnt/efs/geth_l2"
      ContainerDefinitions:
        - Image: !Sub "${DockerPrefix}/${GoEthereumImage}:${ImageTag}"
          Name: geth_l2
          PortMappings:
            - ContainerPort: 8545
              HostPort: 8545
            - ContainerPort: 8546
              HostPort: 8546
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/l2geth.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: DEPLOYER_HTTP
              Value: !Sub
                - "http://${EndpointAddress}:8081"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: URL
              Value: !Sub
                - "http://${EndpointAddress}:8081/addresses.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: ROLLUP_CLIENT_HTTP
              Value: !Sub
                - "http://${EndpointAddress}:7878"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: ROLLUP_STATE_DUMP_PATH
              Value: !Sub
                - "http://${EndpointAddress}:8081/state-dump.latest.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: VERBOSITY
              Value: "6"
          EntryPoint:
            - "sh"
            - "./geth.sh"
          MountPoints:
            - ContainerPath: "/root/.ethereum"
              SourceVolume: l2-node
          DockerLabels:
            com.datadoghq.ad.check_names: '["geth_l2"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "geth_l2", "service": "geth_l2"}]'
          Essential: true
          Memory: "6000"
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: awsvpc
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub "L2Geth-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsCluster"
      LoadBalancers:
        - ContainerName: geth_l2
          ContainerPort: 8545
          TargetGroupArn: !Ref GoEthereumLBTargetGroup
        - ContainerName: geth_l2
          ContainerPort: 8546
          TargetGroupArn: !Ref GoEthereumLBTargetGroupWS
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerIntSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 60
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "l2geth"
      TaskDefinition: !Ref TaskDefinition
