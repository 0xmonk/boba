AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Graph Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DockerPrefix:
    Type: String
    Default: omgx

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/graph.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

  DNSRecordV4Graph:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName:
          Fn::Sub:
            - "dualstack.${DomainName}."
            - DomainName:
                Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:DNSName"
        HostedZoneId:
          Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:CanonicalHostedZoneID"
      HostedZoneName:
        Fn::Sub:
          - "${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
      Name:
        Fn::Sub:
          - "graph.${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"

  GraphLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  IPFSLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 5001
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  IPFSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:ARN"
      Port: 5001
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref IPFSLBTargetGroup

  GraphListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:ARN"
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GraphLBTargetGroup

  GraphLBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8001
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GraphListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:ARN"
      Port: 8001
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GraphLBTargetGroup1

  GraphLBTargetGroup3:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8030
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GraphListener3:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:ARN"
      Port: 8030
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GraphLBTargetGroup3

  GraphLBTargetGroup4:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8020
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  GraphListener4:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:ARN"
      Port: 8020
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GraphLBTargetGroup4

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: ipfs
          Host:
            SourcePath: "/mnt/efs/ipfs"
      ContainerDefinitions:
        - Image: ipfs/go-ipfs:v0.4.23
          Name: ipfs
          PortMappings:
            - ContainerPort: 5001
              HostPort: 5001
          MountPoints:
            - ContainerPath: "/data/ipfs"
              SourceVolume: ipfs
          DockerLabels:
            com.datadoghq.ad.check_names: '["ipfs"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "ipfs", "service": "ipfs"}]'
          Essential: true
          Memory: "1024"
        - Image: graphprotocol/graph-node:latest
          Name: graph
#          Ulimits:
#            - Name: core
#              SoftLimit: 0
#              HardLimit: 0
          PortMappings:
            - ContainerPort: 8000
              HostPort: 8000
            - ContainerPort: 8001
              HostPort: 8001
            - ContainerPort: 8030
              HostPort: 8030
            - ContainerPort: 8020
              HostPort: 8020
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/graph.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ipfs
              Value: !Sub
                - "${EndpointAddress}:5001"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerGraph:DNSName"
            - Name: ethereum
              Value: !Sub
                - "boba:http://${EndpointAddress}:8545"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerReplica:DNSName"
          DockerLabels:
            com.datadoghq.ad.check_names: '["graph"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "graph", "service": "graph"}]'
          Essential: true
          Memory: "1200"
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "Graph-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterVerifier"
      LoadBalancers:
        - ContainerName: graph
          ContainerPort: 8000
          TargetGroupArn: !Ref GraphLBTargetGroup
        - ContainerName: graph
          ContainerPort: 8001
          TargetGroupArn: !Ref GraphLBTargetGroup1
        - ContainerName: graph
          ContainerPort: 8030
          TargetGroupArn: !Ref GraphLBTargetGroup3
        - ContainerName: graph
          ContainerPort: 8020
          TargetGroupArn: !Ref GraphLBTargetGroup4
        - ContainerName: ipfs
          ContainerPort: 5001
          TargetGroupArn: !Ref IPFSLBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerIntSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 30
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "graph"
      TaskDefinition: !Ref TaskDefinition
