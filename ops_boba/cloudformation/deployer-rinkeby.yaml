AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Deployer Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  CFHelperELBv2RulePriorityStack:
    Type: String
    Default: CF-Helper-ELBv2-Rule-Priority

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DeployerImage:
    Type: String
    Default: deployer-rinkeby

  DockerPrefix:
    Type: String
    Default: omgx

  ECRRegistry:
    Type: String
    Default: 942431445534.dkr.ecr.us-east-1.amazonaws.com

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

  SecretName:
    Description: AWS Secret Name used for the service
    Type: String

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                Resource:
                  - arn:aws:secretsmanager:us-east-1:942431445534:secret:*

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Sub "${ECRRegistry}/${DockerPrefix}/${DeployerImage}:${ImageTag}"
          Name: deployer
          PortMappings:
            - ContainerPort: 8081
              HostPort: 8082
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3Bucket}/deployer-rinkeby.env"
              - S3Bucket:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3Bucket"
            - Type: "s3"
          DockerLabels:
            com.datadoghq.ad.check_names: '["deployer"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "deployer", "service": "deployer"}]'
          Essential: true
          Memory: "64"
      NetworkMode: host
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub "deployer"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsCluster"
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "deployer"
      TaskDefinition: !Ref TaskDefinition
