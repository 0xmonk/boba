AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya L2Geth Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  ReplicaL2Image:
    Type: String
    Default: l2geth

  DockerPrefix:
    Type: String
    Default: omgx

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/verifier-l2.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

  VerifierL2Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerReplica:ARN"
      Port: 8545
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref GoEthereumVerifierLBTargetGroup

  GoEthereumVerifierLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8545
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "instance"


  GoEthereumVerifierLBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref GoEthereumVerifierLBTargetGroup
      ListenerArn: !Ref ReplicaL2Listener

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: l2-node
          Host:
            SourcePath: "/mnt/efs/replica_l2"
      ContainerDefinitions:
        - Image: !Sub "${DockerPrefix}/${ReplicaL2Image}:${ImageTag}"
          Name: geth_l2
          Hostname: geth-l2
          PortMappings:
            - ContainerPort: 8545
              HostPort: 8545
            - ContainerPort: 8546
              HostPort: 8545
          EnvironmentFile:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/replica-l2.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
            - Type: "s3"
          Environment:
            - Name: RPC_API
              Value: eth,net,rollup,web3,txpool,debug,db,personal
            - Name: WS_API
              Value: eth,net,rollup,web3,txpool,debug,db,personal
            - Name: ROLLUP_BACKEND
              Value: l2
            - Name: ROLLUP_VERIFIER_ENABLE
              Value: true
            - Name: DEPLOYER_HTTP
              Value: !Sub
                - "https://${EndpointAddress}:8081"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: URL
              Value: !Sub
                - "https://${EndpointAddress}:8081/addresses.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: ROLLUP_CLIENT_HTTP
              Value: !Sub
                - "http://${EndpointAddress}:7878"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: ROLLUP_STATE_DUMP_PATH
              Value: !Sub
                - "https://${EndpointAddress}:8081/state-dump.latest.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: ROLLUP_ENABLE_L2_GAS_POLLING
              Value: true
            - Name: ROLLUP_ENFORCE_FEES
              Value: true
            - Name: GCMODE
              Value: archive
            - Name: NO_DISCOVER
              Value: true
            - Name: ETH1_SYNC_SERVICE_ENABLE
              Value: true
            - Name: ETH1_CONFIRMATION_DEPTH
              Value: 0
          MountPoints:
            - ContainerPath: "/root/.ethereum"
              SourceVolume: l2-node
          DockerLabels:
            com.datadoghq.ad.check_names: '["geth_l2"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "replica_l2", "service": "replica_l2"}]'
          Essential: true
          Memory: "4000"
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: host
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub "L2Replica-${EnvironmentName}"
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterReplica"
      LoadBalancers:
        - ContainerName: geth_l2
          ContainerPort: 8545
          TargetGroupArn: !Ref GoEthereumVerifierLBTargetGroup
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "verifier-l2"
      TaskDefinition: !Ref TaskDefinition
