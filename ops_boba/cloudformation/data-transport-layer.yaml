AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Data Transport Layer Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  CFHelperELBv2RulePriorityStack:
    Type: String
    Default: CF-Helper-ELBv2-Rule-Priority

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DataTransportLayerImage:
    Type: String
    Default: data-transport-layer

  DockerPrefix:
    Type: String
    Default: bobanetwork

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "s3:*"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/data-transport-layer.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

  DataTransportLayerLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 7878
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  DataTransportLayerDeployerListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:ARN"
      Port: 8081
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DataTransportLayerDeployerLBTargetGroup1

  DataTransportLayerDeployerLBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 8081
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  DataTransportLayerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:ARN"
      Port: 7878
      Protocol: TCP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DataTransportLayerLBTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Volumes:
        - Name: db
          Host:
            SourcePath: "/mnt/efs/db"
        - Name: addresses
          Host:
            SourcePath: "/mnt/efs/addresses"
      ContainerDefinitions:
        - Image: !Sub "${DockerPrefix}/${DataTransportLayerImage}:${ImageTag}"
          Name: data_transport_layer
          PortMappings:
            - ContainerPort: 7878
              HostPort: 7878
            - ContainerPort: 8081
              HostPort: 8081
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/data-transport-layer.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: DATA_TRANSPORT_LAYER__L2_RPC_ENDPOINT
              Value: !Sub
                - "https://${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: DEPLOYER_HTTP
              Value: !Sub
                - "http://${EndpointAddress}:8081"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerDeployer:DNSName"
            - Name: URL
              Value: !Sub
                - "http://${EndpointAddress}:8081/addresses.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
          MountPoints:
            - ContainerPath: "/db"
              SourceVolume: db
            - ContainerPath: "/opt/optimism/packages/data-transport-layer/state-dumps/"
              SourceVolume: addresses
          DockerLabels:
            com.datadoghq.ad.check_names: '["data_transport_layer"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "data_transport_layer", "service": "data_transport_layer"}]'
          Essential: true
          Memory: "200"
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "DataTransportLayer-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsCluster"
      LoadBalancers:
        - ContainerName: data_transport_layer
          ContainerPort: 7878
          TargetGroupArn: !Ref DataTransportLayerLBTargetGroup
        - ContainerName: data_transport_layer
          ContainerPort: 8081
          TargetGroupArn: !Ref DataTransportLayerDeployerLBTargetGroup1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerIntSecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 30
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "data-transport-layer"
      TaskDefinition: !Ref TaskDefinition
