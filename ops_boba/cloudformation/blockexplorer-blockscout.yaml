AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Blockscout Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DockerPrefix:
    Type: String
    Default: omgx

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

  SecretName:
    Description: AWS Secret Name used for the service
    Type: String
    Default: integration-v2

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "ec2:*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "s3:*"
                Resource: "*"
        - PolicyName: AllowAccessToS3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:GetBucketLocation"
                Resource: !Sub
                    - "arn:aws:s3:::${S3BucketV2}/blockexplorer-blockscout.env"
                    - S3BucketV2:
                        Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"

  DNSRecordV4Blockscout:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName:
          Fn::Sub:
            - "${DomainName}."
            - DomainName:
                Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerBlockscout:DNSName"
        HostedZoneId:
          Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:CanonicalHostedZoneID"
      HostedZoneName:
        Fn::Sub:
          - "${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
      Name:
        Fn::Sub:
          - "blockexplorer.${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"

  BlockscoutLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 4000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 30
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "ip"

  BlockscoutListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerBlockscout:ARN"
      Port: 443
      Protocol: TLS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/abcacbeb-a855-4234-95e3-0344677c849f
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref BlockscoutLBTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: bobanetwork/blockexplorer-blockscout:latest
          Name: blockscout
          Ulimits:
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 4000
              HostPort: 4000
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3BucketV2}/blockexplorer-blockscout.env"
              - S3BucketV2:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3BucketV2"
              Type: "s3"
          Environment:
            - Name: ETHEREUM_JSONRPC_HTTP_URL
              Value: !Sub
                - "https://replica.${EndpointAddress}"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
            - Name: URL
              Value: !Sub
                - "http://${EndpointAddress}:8081/addresses.json"
                - EndpointAddress:
                    Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerInt:DNSName"
            - Name: SUPPORTED_CHAINS
              Value: '[{"title":"Boba Mainnet","url":"https://blockexplorer.boba.network","hide_in_dropdown?": false},{"title":"Boba Rinkeby","url":"https://blockexplorer.rinkeby.boba.network","test_net?":true},{"title":"Boba Rinkeby Integration","url":"https://blockexplorer.rinkeby-integration.boba.network","test_net?":true,"hide_in_dropdown?": true}]'
          Command:
            - "/bin/sh"
            - "-c"
            - "mix do ecto.create, ecto.migrate; mix phx.server"
          DockerLabels:
            com.datadoghq.ad.check_names: '["blockscout"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "blockscout", "service": "blockscout"}]'
          Essential: true
          Memory: "512"
          LogConfiguration:
            LogDriver: json-file
            Options:
              max-file: "5"
              max-size: "10m"
      NetworkMode: awsvpc
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: "arn:aws:iam::942431445534:role/ecs-s3-rolw"
      Family: !Sub "blockscout-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterReplica"
      LoadBalancers:
        - ContainerName: blockscout
          ContainerPort: 4000
          TargetGroupArn: !Ref BlockscoutLBTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancerReplica:SecurityGroup"
          Subnets:
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet1"
            - Fn::ImportValue: !Sub "${InfrastructureStackName}:PrivateSubnet2"
      HealthCheckGracePeriodSeconds: 60
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "blockscout"
      TaskDefinition: !Ref TaskDefinition
