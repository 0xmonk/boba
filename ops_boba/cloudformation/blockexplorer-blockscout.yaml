AWSTemplateFormatVersion: "2010-09-09"
Description: "Enya Blockscout Application Deployment"

Parameters:
  EnvironmentName:
    Type: String
    Default: dev

  ServiceCount:
    Type: Number
    Default: 1

  ImageTag:
    Type: String
    Default: push2aws

  DockerPrefix:
    Type: String
    Default: omgx

  ECRRegistry:
    Type: String
    Default: 942431445534.dkr.ecr.us-east-1.amazonaws.com

  InfrastructureStackName:
    Description: Infrastructure stack to associate this stack with
    Type: String
    Default: infrastructure-coredev

  SecretName:
    Description: AWS Secret Name used for the service
    Type: String
    Default: integration-v2

Conditions:
  IsProduction:
    !Equals [!Ref EnvironmentName, "production"]

Resources:
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub ecs-tasks.${AWS::URLSuffix}
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AllowAccessToSecrets
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetResourcePolicy"
                  - "secretsmanager:GetSecretValue"
                  - "secretsmanager:DescribeSecret"
                  - "secretsmanager:ListSecretVersionIds"
                Resource:
                  - arn:aws:secretsmanager:us-east-1:942431445534:secret:*
        - PolicyName: AllowAccessToELB
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:Describe*"
                  - "elasticloadbalancing:*"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:DescribeTargetGroups"
                  - "elasticloadbalancing:DescribeTargetHealth"
                  - "elasticloadbalancing:RegisterTargets"
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                Resource: "*"

  LoadBalancerBlockscoutSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "SG for ${AWS::StackName} Blockscout LB"
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 4000
        ToPort: 4000
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 4000
        ToPort: 4000
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0

      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Blockscout-LB"

  LoadBalancerBlockscout:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups:
      - !Ref LoadBalancerBlockscoutSecurityGroup
      Subnets:
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet1
      - Fn::ImportValue: !Sub ${InfrastructureStackName}:PublicSubnet2
      Type: network

  DNSRecordV4Graph:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
            - LoadBalancerBlockscout
            - DNSName
        HostedZoneId:
          Fn::ImportValue: !Sub "${InfrastructureStackName}:LoadBalancer:CanonicalHostedZoneID"
      HostedZoneName:
        Fn::Sub:
          - "${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"
      Name:
        Fn::Sub:
          - "blockexplorer.${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub "${InfrastructureStackName}:DomainName"

  BlockscoutLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 4000
      Protocol: TCP
      VpcId:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:VpcId"
      HealthCheckProtocol: TCP
      HealthCheckPort: "traffic-port"
      TargetType: "instance"

  BlockscoutListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancerBlockscout
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01 # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-1:942431445534:certificate/d9758ac0-9b4b-453b-b3c1-21f06abdd4ac
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref BlockscoutLBTargetGroup

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Sub "${ECRRegistry}/${DockerPrefix}/blockexplorer-blockscout:${ImageTag}"
          Name: blockscout
          Ulimits:
            - Name: core
              SoftLimit: 0
              HardLimit: 0
          PortMappings:
            - ContainerPort: 4000
              HostPort: 4000
          EnvironmentFiles:
            - Value: !Sub
              - "arn:aws:s3:::${S3Bucket}/blockexplorer-blockscout.env"
              - S3Bucket:
                  Fn::ImportValue: !Sub "${InfrastructureStackName}:S3Bucket"
            - Type: "s3"
          DockerLabels:
            com.datadoghq.ad.check_names: '["blockscout"]'
            com.datadoghq.ad.init_configs: '[{}]'
            com.datadoghq.ad.logs: '[{"source": "blockscout", "service": "blockscout"}]'
          Essential: true
          Memory: "512"
      NetworkMode: host
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub "blockscout-${EnvironmentName}"
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${InfrastructureStackName}:EcsClusterReplica"
      LoadBalancers:
        - ContainerName: blockscout
          ContainerPort: 4000
          TargetGroupArn: !Ref BlockscoutLBTargetGroup
      DesiredCount: !Ref ServiceCount
      LaunchType: EC2
      SchedulingStrategy: REPLICA
      ServiceName: "blockscout"
      TaskDefinition: !Ref TaskDefinition
